.content-wrapper
  .container-fluid
    / Content Header (Page header)
    %section.content-header
      .col-md-6
        = render 'shared/flash_messages'
      %h1
        = current_user.company.name
        %a.btn.btn-primary{href: root_path, data: {disable_with: "<i class='fa fa-refresh fa-spin'></i>"}}
          %i.fa.fa-refresh
      %ol.breadcrumb
        - if current_user.can_quick_pay_customers?
          %li
            %a.btn.bg-green{href: '#', "data-toggle" => "modal", "data-target" => "#quick_pay", style: 'color: white;'}
              %i.fa.fa-dollar
              Quick Pay
          = render partial: "quick_pay"
          &nbsp;
          &nbsp;
      %br
    
    / Main content
    %section.content
      - if current_user.can_view_atms?
        .card
          .card-header
            %h3.card-title
              = current_user.company.name
              %a.btn.btn-primary{href: root_path, data: {disable_with: "<i class='fa fa-refresh fa-spin'></i>"}}
                %i.fa.fa-refresh
            - if current_user.can_quick_pay_customers?
              .card-tools.pull-right
                %a.btn.bg-green{href: '#', "data-toggle" => "modal", "data-target" => "#quick_pay", style: 'color: white;'}
                  %i.fa.fa-dollar
                  Quick Pay
                = render partial: "quick_pay"
          .card-body
            - @devices.each do |device|
              .row
                .col-md-12
                  -#
                    .box{class: "#{device.online == 0 ? 'box-success' : device.online == 1 ? 'box-danger' : 'box-warning'}", "data-widget" => "box-widget"}
                      .box-body.no-padding
                  - last_cut_transaction = device.transactions.cuts.last unless device.transactions.cuts.blank?
                  .table-responsive
                    %table.table.table-striped.table-condensed.table-bordered
                      %tbody
                        %tr{class: "device_#{device.id}_bin_details", style: "display: none;"}
                          %td
                          %td{style: 'width: 10%;'}
                            .pull-right
                              %br
                              %strong Start
                              %br
                              %strong Added
                              %br
                              %strong Dispensed
                          = render partial: "devices/bin_details", locals: {device: device}
                          %td
                          %td
                        %tr
                          %td
                            = link_to "#{device.id} #{device.description}", device, class: "btn btn-lg #{device.online == 0 ? 'btn-success' : device.online == 1 ? 'btn-danger' : 'btn-warning'}"
                            %div.pull-right.inline{class: "device_#{device.id}_bin_details", style: 'display:none;'}
                              = last_cut_transaction.date_time.strftime('%-m/%-d/%y %H:%M:%S')
                          %td{style: 'width: 10%;'}
                            .pull-right{class: "device_#{device.id}_bin_details", style: 'display:none;'}
                              %strong Remaining
                          = render partial: "devices/bin_basics", locals: {device: device}
                          %td= number_to_currency(device.remaining)
                          %td
                            .pull-right
                              %button.btn.btn-default.btn-sm{id: "device_#{device.id}_dollar_amount_button", onclick: "$('.device_#{device.id}_dollar_amount').show(); $('.device_#{device.id}_bill_count').hide(); $(this).hide(); $('#device_#{device.id}_bill_count_button').show();",  :type => "button"}
                                %i.fa.fa-dollar
                                Dollar Amount
                              %button.btn.btn-default.btn-sm{id: "device_#{device.id}_bill_count_button", onclick: "$('.device_#{device.id}_dollar_amount').hide(); $('.device_#{device.id}_bill_count').show(); $(this).hide(); $('#device_#{device.id}_dollar_amount_button').show();", :type => "button", style: "display: none;"}
                                %i.fa.fa-hashtag
                                Bill Count
                              %button.btn.btn-box-tool{id: "device_#{device.id}_expand_bin_details", onclick: "$('.device_#{device.id}_bin_details').fadeIn(); $(this).hide(); $('#device_#{device.id}_collapse_bin_details').show();", :type => "button"}
                                %i.fa.fa-angle-down
                                Details
                              %button.btn.btn-box-tool{id: "device_#{device.id}_collapse_bin_details", onclick: "$('.device_#{device.id}_bin_details').fadeOut(); $(this).hide(); $('#device_#{device.id}_expand_bin_details').show();", :type => "button", style: "display: none;"}
                                %i.fa.fa-angle-up
                                Details

- unless @customer_id.blank?
  :javascript
    var url = "#{barcode_customer_url(@customer_id)}";
    window.open(url, '_blank');

:javascript
  $('[data-toggle="popover"]').popover();

-#
  - if current_user.can_view_atms? and not @device.blank? and not (@start_date.blank? or @end_date.blank?)
    :javascript
      $(document).on("turbolinks:load", function() {
        if ($('#myChart').length) {
          var ctx = document.getElementById("myChart").getContext("2d");

          const colors = {
            green: {
              fill: '#e0eadf',
              stroke: '#5eb84d',
            },
            lightBlue: {
              stroke: '#6fccdd',
            },
            darkBlue: {
              fill: '#92bed2',
              stroke: '#3282bf',
            },
            purple: {
              fill: '#8fa8c8',
              stroke: '#75539e',
            },
            red: {
              fill: '#f26868',
              stroke: '#ff0000',
            },
          };

          const transferred = #{@transfers_week_data};
          const withdrawn = #{@withdrawals_week_data};
          const reversed = #{@reversals_week_data};
          const xData = #{raw @week_of_dates_data.uniq};

          const myChart = new Chart(ctx, {
            type: 'bar',
            data: {
              labels: xData,
              datasets: [{
                label: "Withdrawn",
                fill: true,
                backgroundColor: colors.green.fill,
                pointBackgroundColor: colors.green.stroke,
                borderColor: colors.green.stroke,
                pointHighlightStroke: colors.green.stroke,
                borderCapStyle: 'butt',
                data: withdrawn,
              }, {
                label: "Transferred",
                fill: true,
                backgroundColor: colors.darkBlue.fill,
                pointBackgroundColor: colors.darkBlue.stroke,
                borderColor: colors.darkBlue.stroke,
                pointHighlightStroke: colors.darkBlue.stroke,
                data: transferred,
              }, {
                label: "Reversed",
                fill: true,
                backgroundColor: colors.red.fill,
                pointBackgroundColor: colors.red.stroke,
                borderColor: colors.red.stroke,
                pointHighlightStroke: colors.red.stroke,
                data: reversed,
              }]
            },
            options: {
              responsive: true,
              // Can't just use `stacked: true` like the docs say
              scales: {
                yAxes: [{
                  //stacked: true,
                  stacked: false,
                }]
              },
              animation: {
                duration: 750,
              },
            }
          });
        }
      });